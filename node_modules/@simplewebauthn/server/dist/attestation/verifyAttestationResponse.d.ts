import { AttestationCredentialJSON, COSEAlgorithmIdentifier } from '@simplewebauthn/typescript-types';
import { ATTESTATION_FORMATS } from "../helpers/decodeAttestationObject";
declare type Options = {
    credential: AttestationCredentialJSON;
    expectedChallenge: string;
    expectedOrigin: string;
    expectedRPID?: string;
    requireUserVerification?: boolean;
    supportedAlgorithmIDs?: COSEAlgorithmIdentifier[];
};
/**
 * Verify that the user has legitimately completed the registration process
 *
 * **Options:**
 *
 * @param credential Authenticator credential returned by browser's `startAttestation()`
 * @param expectedChallenge The base64url-encoded `options.challenge` returned by
 * `generateAttestationOptions()`
 * @param expectedOrigin Website URL that the attestation should have occurred on
 * @param expectedRPID RP ID that was specified in the attestation options
 * @param requireUserVerification (Optional) Enforce user verification by the authenticator
 * (via PIN, fingerprint, etc...)
 * @param supportedAlgorithmIDs Array of numeric COSE algorithm identifiers supported for
 * attestation by this RP. See https://www.iana.org/assignments/cose/cose.xhtml#algorithms
 */
export default function verifyAttestationResponse(options: Options): Promise<VerifiedAttestation>;
/**
 * Result of attestation verification
 *
 * @param verified If the assertion response could be verified
 * @param userVerified Whether the user was uniquely identified during attestation
 * @param authenticatorInfo.fmt Type of attestation
 * @param authenticatorInfo.counter The number of times the authenticator reported it has been used.
 * Should be kept in a DB for later reference to help prevent replay attacks
 * @param authenticatorInfo.base64PublicKey Base64URL-encoded ArrayBuffer containing the
 * authenticator's public key. **Should be kept in a DB for later reference!**
 * @param authenticatorInfo.base64CredentialID Base64URL-encoded ArrayBuffer containing the
 * authenticator's credential ID for the public key above. **Should be kept in a DB for later
 * reference!**
 */
export declare type VerifiedAttestation = {
    verified: boolean;
    userVerified: boolean;
    authenticatorInfo?: {
        fmt: ATTESTATION_FORMATS;
        counter: number;
        base64PublicKey: string;
        base64CredentialID: string;
    };
};
export {};
