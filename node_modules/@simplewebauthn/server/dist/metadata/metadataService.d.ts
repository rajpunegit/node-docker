/// <reference types="node" />
import { Base64URLString } from '@simplewebauthn/typescript-types';
declare type CachedMDS = {
    url: string;
    alg: string;
    no: number;
    nextUpdate: Date;
    rootCertURL: string;
    metadataURLSuffix: string;
};
/**
 * A basic service for coordinating interactions with the FIDO Metadata Service. This includes TOC
 * download and parsing, and on-demand requesting and caching of individual metadata statements.
 *
 * https://fidoalliance.org/metadata/
 */
declare class MetadataService {
    private mdsCache;
    private statementCache;
    private state;
    /**
     * Prepare the service to handle remote MDS servers and/or cache local metadata statements.
     */
    initialize(opts: {
        mdsServers: Pick<CachedMDS, 'url' | 'rootCertURL' | 'metadataURLSuffix'>[];
        statements?: MetadataStatement[];
    }): Promise<void>;
    /**
     * Get a metadata statement for a given aaguid. Defaults to returning a cached statement.
     *
     * This method will coordinate updating the TOC as per the `nextUpdate` property in the initial
     * TOC download.
     */
    getStatement(aaguid: string | Buffer): Promise<MetadataStatement | undefined>;
    /**
     * Download and process the latest TOC from MDS
     */
    private downloadTOC;
    /**
     * A helper method to pause execution until the service is ready
     */
    private pauseUntilReady;
}
declare const metadataService: MetadataService;
export default metadataService;
export declare type MetadataStatement = {
    aaguid: string;
    assertionScheme: string;
    attachmentHint: number;
    attestationRootCertificates: Base64URLString[];
    attestationTypes: number[];
    authenticationAlgorithm: number;
    authenticatorVersion: number;
    description: string;
    icon: string;
    isSecondFactorOnly: string;
    keyProtection: number;
    legalHeader: string;
    matcherProtection: number;
    protocolFamily: string;
    publicKeyAlgAndEncoding: number;
    tcDisplay: number;
    tcDisplayContentType: string;
    upv: [{
        major: number;
        minor: number;
    }];
    userVerificationDetails: [[{
        userVerification: 1;
    }]];
};
